Implement a KNN model to classify the animals in to categorie

zoo<-read.csv("Zoo.csv")

# drop the name feature
zoo <- zoo[-1]

# table of diagnosis
prop.table(table(zoo$diagnosis))*100

# recode diagnosis as a factor
zoo$diagnosis <- factor(zoo$diagnosis, levels = c("1", "0"),
                         labels = c("Hair", "Non-Hair"))

# table or proportions with more informative labels
round(prop.table(table(zoo$diagnosis)) * 100, digits = 1)

# create normalization function
normalize <- function(x) {
  return ((x - min(x)) / (max(x) - min(x)))
}

# normalize the zoo data
zoo_n <- as.data.frame(lapply(zoo[2:17], normalize))

zoo_nl<-cbind(zoo_n,zoo$diagnosis)

# create training and test data
zoo_train <- zoo_n[1:50, ]
zoo_test <- zoo_n[51:101, ]

# create labels for training and test data

zoo_train_labels <- zoo[1:50, 1]
zoo_test_labels <- zoo[51:101, 1]

#---- Training a model on the data ----

# load the "class" library
library(class)

zoo_test_pred <- knn(train = zoo_train, test = zoo_test,cl = zoo_train_labels, k=25)

##--------Evaluating model performance ----

# load the "gmodels" library
library(gmodels)

# Create the cross tabulation of predicted vs. actual
CrossTable(x = zoo_test_labels, y = zoo_test_pred,
           prop.chisq=FALSE,prop.c = FALSE, prop.r = FALSE)

## Improving model performance ----

# use the scale() function to z-score standardize a data frame
zoo_z <- as.data.frame(scale(zoo[-1]))

# confirm that the transformation was applied correctly
summary(zoo_z$area_mean)

# create training and test datasets
zoo_train <- zoo_z[1:50, ]
zoo_test <- zoo_z[51:101, ]

# re-classify test cases
zoo_test_pred <- knn(train = zoo_train, test = zoo_test,
                      cl = zoo_train_labels, k=21)

# Create the cross tabulation of predicted vs. actual
CrossTable(x = zoo_test_labels, y = zoo_test_pred,
           prop.chisq=FALSE,prop.c = FALSE, prop.r = FALSE)

# try several different values of k
zoo_train <- zoo_n[1:50, ]
zoo_test <- zoo_n[51:101, ]

zoo_test_pred <- knn(train = zoo_train, test = zoo_test, 
                      cl = zoo_train_labels, k=1)
CrossTable(x =zoo_test_labels, y = zoo_test_pred, prop.chisq=FALSE,prop.c = FALSE, prop.r = FALSE)

zoo_test_pred <- knn(train = zoo_train, test = zoo_test, 
                     cl = zoo_train_labels, k=20)
CrossTable(x =zoo_test_labels, y = zoo_test_pred, prop.chisq=FALSE,prop.c = FALSE, prop.r = FALSE)


####################################################################
Prepare a model for glass classification using KNN

Data Description:

RI : refractive index

Na: Sodium (unit measurement: weight percent in corresponding oxide, as are attributes 4-10)

Mg: Magnesium

AI: Aluminum

Si: Silicon

K:Potassium

Ca: Calcium

Ba: Barium

Fe: Iron

Type: Type of glass: (class attribute)
1 -- building_windows_float_processed
 2 --building_windows_non_float_processed
 3 --vehicle_windows_float_processed
 4 --vehicle_windows_non_float_processed (none in this database)
 5 --containers
 6 --tableware
 7 --headlamps







install.packages('caTools')  #for train and test data split
install.packages('dplyr')    #for Data Manipulation
install.packages('ggplot2')  #for Data Visualization
install.packages('class')    #KNN 
install.packages('caret')    #Confusion Matrix
install.packages('corrplot') #Correlation Plot

library(caTools)
library(dplyr)
library(ggplot2)
library(caret)
library(class)
library(corrplot)

glass <- read.csv("glass.csv",
                  col.names=c("RI","Na","Mg","Al","Si","K","Ca","Ba","Fe","Type"))

standard.features <- scale(glass[,1:9])

#Join the standardized data with the target column
data <- cbind(standard.features,glass[10])
#Check if there are any missing values to impute. 
anyNA(data)


head(data)

corrplot(cor(data))

set.seed(101)

sample <- sample.split(data$Type,SplitRatio = 0.70)

train <- subset(data,sample==TRUE)

test <- subset(data,sample==FALSE)

predicted.type <- knn(train[1:9],test[1:9],train$Type,k=1)
#Error in prediction
error <- mean(predicted.type!=test$Type)
#Confusion Matrix
confusionMatrix(predicted.type,test$Type)

predicted.type <- NULL
error.rate <- NULL

for (i in 1:10) {
  predicted.type <- knn(train[1:9],test[1:9],train$Type,k=i)
  error.rate[i] <- mean(predicted.type!=test$Type)
  
}

knn.error <- as.data.frame(cbind(k=1:10,error.type =error.rate))


ggplot(knn.error,aes(k,error.type))+ 
  geom_point()+ 
  geom_line() + 
  scale_x_continuous(breaks=1:10)+ 
  theme_bw() +
  xlab("Value of K") +
  ylab('Error')


predicted.type <- knn(train[1:9],test[1:9],train$Type,k=3)
#Error in prediction
error <- mean(predicted.type!=test$Type)
#Confusion Matrix
confusionMatrix(predicted.type,test$Type)


















